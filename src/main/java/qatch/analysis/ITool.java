package qatch.analysis;

import java.nio.file.Path;
import java.util.Map;

/**
 * Interface definition for static analysis tools.
 *
 * All tools must define how they run, how to parse the results file,
 * and how to transform the parsed data, if needed.
 */
public interface ITool {

    /**
     * Run the external static analysis tool (often a binary or .exe).
     * Given an abstract Tool object, running this method should result in the tool
     * running its analysis on a project and generating its result file.
     *
     * @param projectLocation
     *      Root directory location needed by the tool to perform its analysis
     *      on the given project.
     * @return
     *      The location of the analysis results: often a .xml or .json file.
     *      Ideally this file should be a temporary file stored on disk only
     *      as long as is necessary.
     */
    Path analyze(Path projectLocation);

    /**
     * Parse the analysis file generated by the tool and transform the data
     * into Diagnostic objects with associated Findings (if any exist).
     *
     * @param toolResults
     *      The location of the output file generated by running the static analysis tool
     * @return
     *      A mapping (Key: diagnostic name, Value: diagnostic object) of the parsed diagnostics
     */
    Map<String, Diagnostic> parseAnalysis(Path toolResults);

    /**
     * All tool instances must define how to initialize and access their executable component given the tool's initial
     * root directory.  For example, if it is known the program will be running as a JAR and the tool is contained in
     * the JAR as a resource, this method would define how to extract the tool into a sibling folder and return the path
     * to the copied, now-accessable executable location.
     *
     * @param toolRoot
     *      The initial location of this tool's root folder.
     * @return
     *      Path to executable needed to run this tool.
     */
    Path initialize(Path toolRoot);

    /**
     * @return
     *      The name of the tool
     */
    String getName();
}

